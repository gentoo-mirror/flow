# This file is deprecated as per GLEP 56 in favor of metadata.xml.
# Please add your descriptions to your package's metadata.xml ONLY.
# * generated automatically using pmaint *

app-emulation/grub-xen-host:pvh - Build an additional grub bin for pvh.
app-text/pdfgrep:unac - Removing accents and ligatures before search
media-gfx/gpick:gtk3 - Build for GTK3 instead of GTK2
net-analyzer/crowdsec:cron - Uses virtual/cron for periodic jobs
net-analyzer/crowdsec:server - Install crowdsec server
net-analyzer/gsad:extras - Pdf results, extra fonts, html docs support
net-analyzer/gvm:cli - Command Line Interface for OpenVAS Scanner
net-analyzer/gvm:gsa - Greenbone Security Assistant (WebUI)
net-analyzer/gvm:ospd - Enable support for scanner wrappers
net-analyzer/zabbix:agent - Enable zabbix agent (for to-be-monitored machines)
net-analyzer/zabbix:agent2 - Enable go-based zabbix agent 2 (for to-be-monitored machines)
net-analyzer/zabbix:frontend - Enable zabbix web frontend
net-analyzer/zabbix:ipv6 - Turn on support of IPv6
net-analyzer/zabbix:java - Enable Zabbix Java JMX Management Gateway
net-analyzer/zabbix:libxml2 - Use libxml2 client library
net-analyzer/zabbix:odbc - Enable Database Monitor and use UnixODBC Library by default
net-analyzer/zabbix:openipmi - Enable openipmi things
net-analyzer/zabbix:openssl - Use dev-libs/openssl as TLS backend
net-analyzer/zabbix:pcre2 - Use dev-libs/libpcre2 instead of dev-libs/libpcre
net-analyzer/zabbix:proxy - Enable proxy support
net-analyzer/zabbix:server - Enable zabbix server
net-analyzer/zabbix:ssh - SSH v2 based checks
net-analyzer/zabbix:static - Build statically linked binaries
net-im/ejabberd:captcha - Support for CAPTCHA Forms (XEP-158) on registration
net-im/ejabberd:full-xml - Use XML features in XMPP stream (ex: CDATA), requires XML compliant clients
net-im/ejabberd:mssql - Enable Microsoft SQL Server support (via ODBC) for data storage
net-im/ejabberd:mysql - Enable MySQL support for data storage
net-im/ejabberd:odbc - Enable ODBC support to access data storage
net-im/ejabberd:postgres - Enable PostgreSQL support for data storage
net-im/ejabberd:redis - Enable Redis support for transient data
net-im/ejabberd:roster-gw - Turn on workaround for processing gateway subscriptions
net-im/ejabberd:sip - Enable SIP support
net-im/ejabberd:sqlite - Enable SQLite database support
net-im/ejabberd:stun - Enable STUN/TURN support
net-im/ejabberd:zlib - Enable Stream Compression (XEP-0138) using zlib
sys-apps/pcsc-lite:embedded - limit RAM and CPU ressources by disabling features
sys-apps/pcsc-lite:libusb - Use dev-libs/libusb detection to hotplug new smartcard readers. This flag should only be enabled if you're running a non-Linux kernel or you don't want to use udev.
sys-apps/pcsc-lite:policykit - Uses sys-auth/polkit to restrict access to smartcard readers or smartcards to given users.
sys-apps/pcsc-lite:udev - Use virtual/libudev rules to handle devices' permissions and hotplug support. Unless you know what you're doing do not disable this flag on Linux kernels. This is provided as an option for completeness.
sys-devel/gcc:ada - Build the ADA language (GNAT) frontend
sys-devel/gcc:cet - Enable support for control flow hijacking protection. On amd64, this provides Intel Control Flow Enforcement Technology (CET). On arm64, this provides Branch Target Identification (BTI) and Pointer Authentication Code (PAC) support. This is only effective on amd64 or arm64. Only provides benefits on newer CPUs. For Intel, the CPU must be at least as new as Tiger Lake. For AMD, it must be at least as new as Zen 3. This is harmless on older CPUs, but provides no benefit either. For ARM64, PAC was introduced in armv8.3-a, and BTI was introduced in armv8.5-a. When combined with USE=hardened on amd64, GCC will set -fcf-protection by default when building software. The effect is minimal on systems which do not support it, other than a possible small increase in codesize for the NOPs. The generated code is therefore compatible with i686 at the earliest. On arm64, GCC will set -mbranch-protection=standard by default when building software.
sys-devel/gcc:d - Enable support for the D programming language
sys-devel/gcc:debug - Enables GCC's 'checking' facility via --enable-checking=yes,extra,rtl. This adds checks to various compiler passes for integrity and input validation. This can help catch possible miscompilations early as well as latent bugs which could become real problems in future, but at the cost of slower compile times when using GCC. Unrelated to backtraces.
sys-devel/gcc:default-stack-clash-protection - Build packages with stack clash protection on by default as a hardening measure. This enables -fstack-clash-protection by default which protects against large memory allocations allowing stack smashing. May cause slightly increased codesize, but modern compilers have been adapted to optimize well for this case, as this mitigation is now quite common. See https://developers.redhat.com/blog/2020/05/22/stack-clash-mitigation-in-gcc-part-3 and https://www.qualys.com/2017/06/19/stack-clash/stack-clash.txt.
sys-devel/gcc:default-znow - Request full relocation on start from ld.so by default. This sets the -z,now (BIND_NOW) flag by default on all linker invocations. By resolving all dynamic symbols at application startup, parts of the program can be made read-only as a hardening measure. This is closely related to RELRO which is also separately enabled by default. In some applications with many unresolved symbols (heavily plugin based, for example), startup time may be impacted.
sys-devel/gcc:fixed-point - Enable fixed-point arithmetic support for MIPS targets in gcc (Warning: significantly increases compile time!)
sys-devel/gcc:go - Build the GCC Go language frontend.
sys-devel/gcc:graphite - Add support for the framework for loop optimizations based on a polyhedral intermediate representation
sys-devel/gcc:ieee-long-double - Use accelerated 128-bit IEEE long double ABI (ppc64le only)
sys-devel/gcc:jit - Enable libgccjit so other applications can embed gcc for Just-In-Time compilation.
sys-devel/gcc:libgdiagnostics - Provide libgdiagnostics (https://gcc.gnu.org/wiki/libgdiagnostics). This also installs the 'sarif-replay' tool.
sys-devel/gcc:libssp - Build SSP support into a dedicated library rather than use the code in the C library (DO NOT ENABLE THIS IF YOU DON'T KNOW WHAT IT DOES)
sys-devel/gcc:lto - Build using Link Time Optimizations (LTO). Note that GCC is always built with support for building other programs with LTO. This USE flag is for whether GCC itself is built and optimized with LTO.
sys-devel/gcc:modula2 - Build the GCC Modula-2 language frontend.
sys-devel/gcc:objc - Build support for the Objective C code language
sys-devel/gcc:objc++ - Build support for the Objective C++ language
sys-devel/gcc:objc-gc - Build support for the Objective C code language Garbage Collector
sys-devel/gcc:pgo - Build GCC using Profile Guided Optimization (PGO). GCC will build itself and then analyze the just-built binary and then rebuild itself using the data obtained from analysis of codepaths taken. It does not affect whether GCC itself supports PGO when building other software. This substantially increases the build time needed for building GCC itself.
sys-devel/gcc:rust - Build support for the Rust language, installs gccrs.
sys-devel/gcc:sanitize - Build support for various sanitizer functions (ASAN/TSAN/etc...) to find runtime problems in applications.
sys-devel/gcc:ssp - Build packages with stack smashing protection on by default
sys-devel/gcc:systemtap - enable systemtap static probe points
sys-devel/gcc:vtv - Build support for virtual table verification (a C++ hardening feature). This does not control whether GCC defaults to using VTV> Note that actually using VTV breaks ABI and hence the whole system must be built with -fvtable-verify.
sys-kernel/system-config:ioscheduler - Install IO scehduler rules (BFQ for HDD/SSD, None for NVMe)
x11-libs/gtkdatabox:glade - Build with libglade and glade-3 supports, which includes a glade's module for GtkDataBox widget
